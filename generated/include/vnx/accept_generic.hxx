
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_ACCEPT_GENERIC_HXX_
#define INCLUDE_vnx_ACCEPT_GENERIC_HXX_

#include <vnx/Endpoint.hxx>
#include <vnx/Exception.hxx>
#include <vnx/FlowMessage.hxx>
#include <vnx/Frame.hxx>
#include <vnx/GatewayInterface_forward.hxx>
#include <vnx/GatewayInterface_forward_return.hxx>
#include <vnx/Generic.hxx>
#include <vnx/Heartbeat.hxx>
#include <vnx/InternalError.hxx>
#include <vnx/JRPC_Error.hxx>
#include <vnx/JRPC_Failure.hxx>
#include <vnx/JRPC_Notification.hxx>
#include <vnx/JRPC_Proxy_select_service.hxx>
#include <vnx/JRPC_Proxy_select_service_return.hxx>
#include <vnx/JRPC_Request.hxx>
#include <vnx/JRPC_Response.hxx>
#include <vnx/JRPC_Success.hxx>
#include <vnx/LogMsg.hxx>
#include <vnx/Marker.hxx>
#include <vnx/Message.hxx>
#include <vnx/ModuleInfo.hxx>
#include <vnx/ModuleInterface_vnx_get_config.hxx>
#include <vnx/ModuleInterface_vnx_get_config_return.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info_return.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code_return.hxx>
#include <vnx/ModuleInterface_vnx_restart.hxx>
#include <vnx/ModuleInterface_vnx_restart_return.hxx>
#include <vnx/ModuleInterface_vnx_self_test.hxx>
#include <vnx/ModuleInterface_vnx_self_test_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config.hxx>
#include <vnx/ModuleInterface_vnx_set_config_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_stop.hxx>
#include <vnx/ModuleInterface_vnx_stop_return.hxx>
#include <vnx/NoSuchMethod.hxx>
#include <vnx/NoSuchService.hxx>
#include <vnx/OverflowException.hxx>
#include <vnx/PermissionDenied.hxx>
#include <vnx/Player_get_info.hxx>
#include <vnx/Player_get_info_return.hxx>
#include <vnx/Player_pause.hxx>
#include <vnx/Player_pause_return.hxx>
#include <vnx/Player_play.hxx>
#include <vnx/Player_play_return.hxx>
#include <vnx/Player_seek_by_count.hxx>
#include <vnx/Player_seek_by_count_return.hxx>
#include <vnx/Player_seek_by_time.hxx>
#include <vnx/Player_seek_by_time_return.hxx>
#include <vnx/Player_seek_to_position.hxx>
#include <vnx/Player_seek_to_position_return.hxx>
#include <vnx/Player_seek_to_time.hxx>
#include <vnx/Player_seek_to_time_return.hxx>
#include <vnx/Player_set_speed.hxx>
#include <vnx/Player_set_speed_return.hxx>
#include <vnx/Player_stop.hxx>
#include <vnx/Player_stop_return.hxx>
#include <vnx/Player_toggle.hxx>
#include <vnx/Player_toggle_return.hxx>
#include <vnx/PlayerStatus.hxx>
#include <vnx/Process_get_global_config.hxx>
#include <vnx/Process_get_global_config_return.hxx>
#include <vnx/Process_get_module_info.hxx>
#include <vnx/Process_get_module_info_return.hxx>
#include <vnx/Process_get_name.hxx>
#include <vnx/Process_get_name_return.hxx>
#include <vnx/Process_get_process_info.hxx>
#include <vnx/Process_get_process_info_return.hxx>
#include <vnx/Process_get_sync_time.hxx>
#include <vnx/Process_get_sync_time_return.hxx>
#include <vnx/Process_get_topic_info.hxx>
#include <vnx/Process_get_topic_info_return.hxx>
#include <vnx/Process_grep_log.hxx>
#include <vnx/Process_grep_log_return.hxx>
#include <vnx/Process_journal_log.hxx>
#include <vnx/Process_journal_log_return.hxx>
#include <vnx/Process_pause_log.hxx>
#include <vnx/Process_pause_log_return.hxx>
#include <vnx/Process_reload_config.hxx>
#include <vnx/Process_reload_config_return.hxx>
#include <vnx/Process_resume_log.hxx>
#include <vnx/Process_resume_log_return.hxx>
#include <vnx/Process_self_test_all.hxx>
#include <vnx/Process_self_test_all_return.hxx>
#include <vnx/Process_set_debug.hxx>
#include <vnx/Process_set_debug_return.hxx>
#include <vnx/Process_set_global_config.hxx>
#include <vnx/Process_set_global_config_return.hxx>
#include <vnx/Process_show_error_log.hxx>
#include <vnx/Process_show_error_log_return.hxx>
#include <vnx/Process_trigger_shutdown.hxx>
#include <vnx/Process_trigger_shutdown_return.hxx>
#include <vnx/Process_ungrep_log.hxx>
#include <vnx/Process_ungrep_log_return.hxx>
#include <vnx/ProcessInfo.hxx>
#include <vnx/ProxyInterface_disable_export.hxx>
#include <vnx/ProxyInterface_disable_export_return.hxx>
#include <vnx/ProxyInterface_disable_forward.hxx>
#include <vnx/ProxyInterface_disable_forward_return.hxx>
#include <vnx/ProxyInterface_disable_import.hxx>
#include <vnx/ProxyInterface_disable_import_return.hxx>
#include <vnx/ProxyInterface_disable_tunnel.hxx>
#include <vnx/ProxyInterface_disable_tunnel_return.hxx>
#include <vnx/ProxyInterface_enable_export.hxx>
#include <vnx/ProxyInterface_enable_export_return.hxx>
#include <vnx/ProxyInterface_enable_forward.hxx>
#include <vnx/ProxyInterface_enable_forward_return.hxx>
#include <vnx/ProxyInterface_enable_import.hxx>
#include <vnx/ProxyInterface_enable_import_return.hxx>
#include <vnx/ProxyInterface_enable_tunnel.hxx>
#include <vnx/ProxyInterface_enable_tunnel_return.hxx>
#include <vnx/ProxyInterface_get_session.hxx>
#include <vnx/ProxyInterface_get_session_return.hxx>
#include <vnx/ProxyInterface_login.hxx>
#include <vnx/ProxyInterface_login_return.hxx>
#include <vnx/ProxyInterface_on_connect.hxx>
#include <vnx/ProxyInterface_on_connect_return.hxx>
#include <vnx/ProxyInterface_on_disconnect.hxx>
#include <vnx/ProxyInterface_on_disconnect_return.hxx>
#include <vnx/ProxyInterface_on_login.hxx>
#include <vnx/ProxyInterface_on_login_return.hxx>
#include <vnx/ProxyInterface_on_remote_connect.hxx>
#include <vnx/ProxyInterface_on_remote_connect_return.hxx>
#include <vnx/ProxyInterface_on_remote_login.hxx>
#include <vnx/ProxyInterface_on_remote_login_return.hxx>
#include <vnx/ProxyInterface_wait_on_connect.hxx>
#include <vnx/ProxyInterface_wait_on_connect_return.hxx>
#include <vnx/ProxyInterface_wait_on_disconnect.hxx>
#include <vnx/ProxyInterface_wait_on_disconnect_return.hxx>
#include <vnx/RecordHeader.hxx>
#include <vnx/RecordIndex.hxx>
#include <vnx/RecordPointer.hxx>
#include <vnx/RecorderStatus.hxx>
#include <vnx/Request.hxx>
#include <vnx/RequestQueue_clear.hxx>
#include <vnx/RequestQueue_clear_return.hxx>
#include <vnx/RequestQueue_purge.hxx>
#include <vnx/RequestQueue_purge_return.hxx>
#include <vnx/Return.hxx>
#include <vnx/Sample.hxx>
#include <vnx/Session.hxx>
#include <vnx/TcpEndpoint.hxx>
#include <vnx/Terminal_read_char.hxx>
#include <vnx/Terminal_read_char_return.hxx>
#include <vnx/Terminal_read_event.hxx>
#include <vnx/Terminal_read_event_return.hxx>
#include <vnx/TimeControl.hxx>
#include <vnx/TimeSync.hxx>
#include <vnx/TopicInfo.hxx>
#include <vnx/TopicInfoList.hxx>
#include <vnx/Tuple.hxx>
#include <vnx/UnixEndpoint.hxx>
#include <vnx/User.hxx>


namespace vnx {

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Endpoint> value) {
	if(value) {
		if(auto tmp = std::dynamic_pointer_cast<const ::vnx::TcpEndpoint>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else if(auto tmp = std::dynamic_pointer_cast<const ::vnx::UnixEndpoint>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else {
			value->accept_generic(visitor);
		}
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Exception> value) {
	if(value) {
		if(auto tmp = std::dynamic_pointer_cast<const ::vnx::InternalError>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else if(auto tmp = std::dynamic_pointer_cast<const ::vnx::NoSuchMethod>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else if(auto tmp = std::dynamic_pointer_cast<const ::vnx::NoSuchService>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else if(auto tmp = std::dynamic_pointer_cast<const ::vnx::OverflowException>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else if(auto tmp = std::dynamic_pointer_cast<const ::vnx::PermissionDenied>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else {
			value->accept_generic(visitor);
		}
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::FlowMessage> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Frame> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::GatewayInterface_forward> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::GatewayInterface_forward_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Generic> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Heartbeat> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::InternalError> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::JRPC_Error> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::JRPC_Failure> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::JRPC_Notification> value) {
	if(value) {
		if(auto tmp = std::dynamic_pointer_cast<const ::vnx::JRPC_Request>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else {
			value->accept_generic(visitor);
		}
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::JRPC_Proxy_select_service> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::JRPC_Proxy_select_service_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::JRPC_Request> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::JRPC_Response> value) {
	if(value) {
		if(auto tmp = std::dynamic_pointer_cast<const ::vnx::JRPC_Failure>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else if(auto tmp = std::dynamic_pointer_cast<const ::vnx::JRPC_Success>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else {
			value->accept_generic(visitor);
		}
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::JRPC_Success> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::LogMsg> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Marker> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Message> value) {
	if(value) {
		if(auto tmp = std::dynamic_pointer_cast<const ::vnx::FlowMessage>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else if(auto tmp = std::dynamic_pointer_cast<const ::vnx::Frame>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else if(auto tmp = std::dynamic_pointer_cast<const ::vnx::Request>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else if(auto tmp = std::dynamic_pointer_cast<const ::vnx::Return>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else if(auto tmp = std::dynamic_pointer_cast<const ::vnx::Sample>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else {
			value->accept_generic(visitor);
		}
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInfo> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInterface_vnx_get_config> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInterface_vnx_get_config_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInterface_vnx_get_config_object> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInterface_vnx_get_config_object_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInterface_vnx_get_module_info> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInterface_vnx_get_module_info_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInterface_vnx_get_type_code> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInterface_vnx_get_type_code_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInterface_vnx_restart> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInterface_vnx_restart_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInterface_vnx_self_test> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInterface_vnx_self_test_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInterface_vnx_set_config> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInterface_vnx_set_config_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInterface_vnx_set_config_object> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInterface_vnx_set_config_object_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInterface_vnx_stop> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ModuleInterface_vnx_stop_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::NoSuchMethod> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::NoSuchService> value) {
	if(value) {
		if(auto tmp = std::dynamic_pointer_cast<const ::vnx::NoSuchMethod>(value)) {
			vnx::accept_generic(visitor, tmp);
		} else {
			value->accept_generic(visitor);
		}
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::OverflowException> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::PermissionDenied> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_get_info> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_get_info_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_pause> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_pause_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_play> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_play_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_seek_by_count> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_seek_by_count_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_seek_by_time> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_seek_by_time_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_seek_to_position> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_seek_to_position_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_seek_to_time> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_seek_to_time_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_set_speed> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_set_speed_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_stop> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_stop_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_toggle> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Player_toggle_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::PlayerStatus> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_get_global_config> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_get_global_config_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_get_module_info> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_get_module_info_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_get_name> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_get_name_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_get_process_info> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_get_process_info_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_get_sync_time> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_get_sync_time_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_get_topic_info> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_get_topic_info_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_grep_log> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_grep_log_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_journal_log> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_journal_log_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_pause_log> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_pause_log_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_reload_config> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_reload_config_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_resume_log> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_resume_log_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_self_test_all> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_self_test_all_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_set_debug> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_set_debug_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_set_global_config> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_set_global_config_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_show_error_log> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_show_error_log_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_trigger_shutdown> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_trigger_shutdown_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_ungrep_log> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Process_ungrep_log_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProcessInfo> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_disable_export> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_disable_export_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_disable_forward> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_disable_forward_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_disable_import> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_disable_import_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_disable_tunnel> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_disable_tunnel_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_enable_export> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_enable_export_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_enable_forward> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_enable_forward_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_enable_import> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_enable_import_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_enable_tunnel> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_enable_tunnel_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_get_session> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_get_session_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_login> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_login_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_on_connect> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_on_connect_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_on_disconnect> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_on_disconnect_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_on_login> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_on_login_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_on_remote_connect> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_on_remote_connect_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_on_remote_login> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_on_remote_login_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_wait_on_connect> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_wait_on_connect_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_wait_on_disconnect> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::ProxyInterface_wait_on_disconnect_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::RecordHeader> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::RecordIndex> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::RecordPointer> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::RecorderStatus> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Request> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::RequestQueue_clear> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::RequestQueue_clear_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::RequestQueue_purge> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::RequestQueue_purge_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Sample> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Session> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::TcpEndpoint> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Terminal_read_char> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Terminal_read_char_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Terminal_read_event> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Terminal_read_event_return> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::TimeControl> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::TimeSync> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::TopicInfo> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::TopicInfoList> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::Tuple> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::UnixEndpoint> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}

template<typename V>
void accept_generic(V& visitor, std::shared_ptr<const ::vnx::User> value) {
	if(value) {
		value->accept_generic(visitor);
	} else {
		visitor.accept(nullptr);
	}
}



} // namespace vnx

#endif // INCLUDE_vnx_ACCEPT_GENERIC_HXX_
