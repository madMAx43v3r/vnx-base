
// AUTO GENERATED by vnxcppcodegen

#include <vnx/package.hxx>
#include <vnx/SpyToolBase.hxx>
#include <vnx/NoSuchMethod.hxx>
#include <vnx/Hash64.hpp>
#include <vnx/Module.h>
#include <vnx/ModuleInterface_vnx_get_config.hxx>
#include <vnx/ModuleInterface_vnx_get_config_return.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info_return.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code_return.hxx>
#include <vnx/ModuleInterface_vnx_restart.hxx>
#include <vnx/ModuleInterface_vnx_restart_return.hxx>
#include <vnx/ModuleInterface_vnx_self_test.hxx>
#include <vnx/ModuleInterface_vnx_self_test_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config.hxx>
#include <vnx/ModuleInterface_vnx_set_config_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_stop.hxx>
#include <vnx/ModuleInterface_vnx_stop_return.hxx>
#include <vnx/TopicInfoList.hxx>

#include <vnx/vnx.h>


namespace vnx {


const vnx::Hash64 SpyToolBase::VNX_TYPE_HASH(0x908abf18434bf596ull);
const vnx::Hash64 SpyToolBase::VNX_CODE_HASH(0xea92a7443e56020aull);

SpyToolBase::SpyToolBase(const std::string& _vnx_name)
	:	Module::Module(_vnx_name)
{
	vnx::read_config(vnx_name + ".proxy_name", proxy_name);
	vnx::read_config(vnx_name + ".topic_expr", topic_expr);
	vnx::read_config(vnx_name + ".exact_match", exact_match);
	vnx::read_config(vnx_name + ".only_once", only_once);
	vnx::read_config(vnx_name + ".header_only", header_only);
	vnx::read_config(vnx_name + ".pretty_print", pretty_print);
	vnx::read_config(vnx_name + ".show_resend", show_resend);
	vnx::read_config(vnx_name + ".max_list_size", max_list_size);
	vnx::read_config(vnx_name + ".max_queue_ms", max_queue_ms);
	vnx::read_config(vnx_name + ".receive_tunnel", receive_tunnel);
}

vnx::Hash64 SpyToolBase::get_type_hash() const {
	return VNX_TYPE_HASH;
}

std::string SpyToolBase::get_type_name() const {
	return "vnx.SpyTool";
}

const vnx::TypeCode* SpyToolBase::get_type_code() const {
	return vnx::vnx_native_type_code_SpyToolBase;
}

void SpyToolBase::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = vnx::vnx_native_type_code_SpyToolBase;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, proxy_name);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, topic_expr);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, exact_match);
	_visitor.type_field(_type_code->fields[3], 3); vnx::accept(_visitor, only_once);
	_visitor.type_field(_type_code->fields[4], 4); vnx::accept(_visitor, header_only);
	_visitor.type_field(_type_code->fields[5], 5); vnx::accept(_visitor, pretty_print);
	_visitor.type_field(_type_code->fields[6], 6); vnx::accept(_visitor, show_resend);
	_visitor.type_field(_type_code->fields[7], 7); vnx::accept(_visitor, max_list_size);
	_visitor.type_field(_type_code->fields[8], 8); vnx::accept(_visitor, max_queue_ms);
	_visitor.type_field(_type_code->fields[9], 9); vnx::accept(_visitor, receive_tunnel);
	_visitor.type_end(*_type_code);
}

void SpyToolBase::write(std::ostream& _out) const {
	_out << "{";
	_out << "\"proxy_name\": "; vnx::write(_out, proxy_name);
	_out << ", \"topic_expr\": "; vnx::write(_out, topic_expr);
	_out << ", \"exact_match\": "; vnx::write(_out, exact_match);
	_out << ", \"only_once\": "; vnx::write(_out, only_once);
	_out << ", \"header_only\": "; vnx::write(_out, header_only);
	_out << ", \"pretty_print\": "; vnx::write(_out, pretty_print);
	_out << ", \"show_resend\": "; vnx::write(_out, show_resend);
	_out << ", \"max_list_size\": "; vnx::write(_out, max_list_size);
	_out << ", \"max_queue_ms\": "; vnx::write(_out, max_queue_ms);
	_out << ", \"receive_tunnel\": "; vnx::write(_out, receive_tunnel);
	_out << "}";
}

void SpyToolBase::read(std::istream& _in) {
	if(auto _json = vnx::read_json(_in)) {
		from_object(_json->to_object());
	}
}

vnx::Object SpyToolBase::to_object() const {
	vnx::Object _object;
	_object["__type"] = "vnx.SpyTool";
	_object["proxy_name"] = proxy_name;
	_object["topic_expr"] = topic_expr;
	_object["exact_match"] = exact_match;
	_object["only_once"] = only_once;
	_object["header_only"] = header_only;
	_object["pretty_print"] = pretty_print;
	_object["show_resend"] = show_resend;
	_object["max_list_size"] = max_list_size;
	_object["max_queue_ms"] = max_queue_ms;
	_object["receive_tunnel"] = receive_tunnel;
	return _object;
}

void SpyToolBase::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "exact_match") {
			_entry.second.to(exact_match);
		} else if(_entry.first == "header_only") {
			_entry.second.to(header_only);
		} else if(_entry.first == "max_list_size") {
			_entry.second.to(max_list_size);
		} else if(_entry.first == "max_queue_ms") {
			_entry.second.to(max_queue_ms);
		} else if(_entry.first == "only_once") {
			_entry.second.to(only_once);
		} else if(_entry.first == "pretty_print") {
			_entry.second.to(pretty_print);
		} else if(_entry.first == "proxy_name") {
			_entry.second.to(proxy_name);
		} else if(_entry.first == "receive_tunnel") {
			_entry.second.to(receive_tunnel);
		} else if(_entry.first == "show_resend") {
			_entry.second.to(show_resend);
		} else if(_entry.first == "topic_expr") {
			_entry.second.to(topic_expr);
		}
	}
}

vnx::Variant SpyToolBase::get_field(const std::string& _name) const {
	if(_name == "proxy_name") {
		return vnx::Variant(proxy_name);
	}
	if(_name == "topic_expr") {
		return vnx::Variant(topic_expr);
	}
	if(_name == "exact_match") {
		return vnx::Variant(exact_match);
	}
	if(_name == "only_once") {
		return vnx::Variant(only_once);
	}
	if(_name == "header_only") {
		return vnx::Variant(header_only);
	}
	if(_name == "pretty_print") {
		return vnx::Variant(pretty_print);
	}
	if(_name == "show_resend") {
		return vnx::Variant(show_resend);
	}
	if(_name == "max_list_size") {
		return vnx::Variant(max_list_size);
	}
	if(_name == "max_queue_ms") {
		return vnx::Variant(max_queue_ms);
	}
	if(_name == "receive_tunnel") {
		return vnx::Variant(receive_tunnel);
	}
	return vnx::Variant();
}

void SpyToolBase::set_field(const std::string& _name, const vnx::Variant& _value) {
	if(_name == "proxy_name") {
		_value.to(proxy_name);
	} else if(_name == "topic_expr") {
		_value.to(topic_expr);
	} else if(_name == "exact_match") {
		_value.to(exact_match);
	} else if(_name == "only_once") {
		_value.to(only_once);
	} else if(_name == "header_only") {
		_value.to(header_only);
	} else if(_name == "pretty_print") {
		_value.to(pretty_print);
	} else if(_name == "show_resend") {
		_value.to(show_resend);
	} else if(_name == "max_list_size") {
		_value.to(max_list_size);
	} else if(_name == "max_queue_ms") {
		_value.to(max_queue_ms);
	} else if(_name == "receive_tunnel") {
		_value.to(receive_tunnel);
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const SpyToolBase& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, SpyToolBase& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* SpyToolBase::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> SpyToolBase::static_create_type_code() {
	auto type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "vnx.SpyTool";
	type_code->type_hash = vnx::Hash64(0x908abf18434bf596ull);
	type_code->code_hash = vnx::Hash64(0xea92a7443e56020aull);
	type_code->is_native = true;
	type_code->native_size = sizeof(::vnx::SpyToolBase);
	type_code->methods.resize(9);
	type_code->methods[0] = ::vnx::ModuleInterface_vnx_get_config::static_get_type_code();
	type_code->methods[1] = ::vnx::ModuleInterface_vnx_get_config_object::static_get_type_code();
	type_code->methods[2] = ::vnx::ModuleInterface_vnx_get_module_info::static_get_type_code();
	type_code->methods[3] = ::vnx::ModuleInterface_vnx_get_type_code::static_get_type_code();
	type_code->methods[4] = ::vnx::ModuleInterface_vnx_restart::static_get_type_code();
	type_code->methods[5] = ::vnx::ModuleInterface_vnx_self_test::static_get_type_code();
	type_code->methods[6] = ::vnx::ModuleInterface_vnx_set_config::static_get_type_code();
	type_code->methods[7] = ::vnx::ModuleInterface_vnx_set_config_object::static_get_type_code();
	type_code->methods[8] = ::vnx::ModuleInterface_vnx_stop::static_get_type_code();
	type_code->fields.resize(10);
	{
		auto& field = type_code->fields[0];
		field.is_extended = true;
		field.name = "proxy_name";
		field.code = {32};
	}
	{
		auto& field = type_code->fields[1];
		field.is_extended = true;
		field.name = "topic_expr";
		field.code = {32};
	}
	{
		auto& field = type_code->fields[2];
		field.data_size = 1;
		field.name = "exact_match";
		field.value = vnx::to_string(true);
		field.code = {31};
	}
	{
		auto& field = type_code->fields[3];
		field.data_size = 1;
		field.name = "only_once";
		field.value = vnx::to_string(false);
		field.code = {31};
	}
	{
		auto& field = type_code->fields[4];
		field.data_size = 1;
		field.name = "header_only";
		field.value = vnx::to_string(false);
		field.code = {31};
	}
	{
		auto& field = type_code->fields[5];
		field.data_size = 1;
		field.name = "pretty_print";
		field.value = vnx::to_string(true);
		field.code = {31};
	}
	{
		auto& field = type_code->fields[6];
		field.data_size = 1;
		field.name = "show_resend";
		field.value = vnx::to_string(false);
		field.code = {31};
	}
	{
		auto& field = type_code->fields[7];
		field.data_size = 4;
		field.name = "max_list_size";
		field.value = vnx::to_string(1000);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[8];
		field.data_size = 4;
		field.name = "max_queue_ms";
		field.value = vnx::to_string(100);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[9];
		field.is_extended = true;
		field.name = "receive_tunnel";
		field.code = {4};
	}
	type_code->build();
	return type_code;
}

void SpyToolBase::vnx_handle_switch(std::shared_ptr<const vnx::Value> _value) {
	const auto* _type_code = _value->get_type_code();
	while(_type_code) {
		switch(_type_code->type_hash) {
			case 0x6c3f27749539f1c2ull:
				handle(std::static_pointer_cast<const ::vnx::TopicInfoList>(_value));
				return;
			default:
				_type_code = _type_code->super;
		}
	}
	handle(std::static_pointer_cast<const vnx::Value>(_value));
}

std::shared_ptr<vnx::Value> SpyToolBase::vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) {
	switch(_method->get_type_hash()) {
		case 0xbbc7f1a01044d294ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_config_return::create();
			_return_value->_ret_0 = vnx_get_config(_args->name);
			return _return_value;
		}
		case 0x17f58f68bf83abc0ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_object>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_config_object_return::create();
			_return_value->_ret_0 = vnx_get_config_object();
			return _return_value;
		}
		case 0xf6d82bdf66d034a1ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_module_info>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_module_info_return::create();
			_return_value->_ret_0 = vnx_get_module_info();
			return _return_value;
		}
		case 0x305ec4d628960e5dull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_type_code>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_type_code_return::create();
			_return_value->_ret_0 = vnx_get_type_code();
			return _return_value;
		}
		case 0x9e95dc280cecca1bull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_restart>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_restart_return::create();
			vnx_restart();
			return _return_value;
		}
		case 0x6ce3775b41a42697ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_self_test>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_self_test_return::create();
			_return_value->_ret_0 = vnx_self_test();
			return _return_value;
		}
		case 0x362aac91373958b7ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_set_config>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_set_config_return::create();
			vnx_set_config(_args->name, _args->value);
			return _return_value;
		}
		case 0xca30f814f17f322full: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_set_config_object>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_set_config_object_return::create();
			vnx_set_config_object(_args->config);
			return _return_value;
		}
		case 0x7ab49ce3d1bfc0d2ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_stop>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_stop_return::create();
			vnx_stop();
			return _return_value;
		}
	}
	auto _ex = vnx::NoSuchMethod::create();
	_ex->method = _method->get_type_name();
	return _ex;
}


} // namespace vnx


namespace vnx {

void read(TypeInput& in, ::vnx::SpyToolBase& value, const TypeCode* type_code, const uint16_t* code) {
	TypeInput::recursion_t tag(in);
	if(code) {
		switch(code[0]) {
			case CODE_OBJECT:
			case CODE_ALT_OBJECT: {
				Object tmp;
				vnx::read(in, tmp, type_code, code);
				value.from_object(tmp);
				return;
			}
			case CODE_DYNAMIC:
			case CODE_ALT_DYNAMIC:
				vnx::read_dynamic(in, value);
				return;
		}
	}
	if(!type_code) {
		vnx::skip(in, type_code, code);
		return;
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: {
				vnx::skip(in, type_code, code);
				return;
			}
		}
	}
	const auto* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
		if(const auto* const _field = type_code->field_map[2]) {
			vnx::read_value(_buf + _field->offset, value.exact_match, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[3]) {
			vnx::read_value(_buf + _field->offset, value.only_once, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[4]) {
			vnx::read_value(_buf + _field->offset, value.header_only, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[5]) {
			vnx::read_value(_buf + _field->offset, value.pretty_print, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[6]) {
			vnx::read_value(_buf + _field->offset, value.show_resend, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[7]) {
			vnx::read_value(_buf + _field->offset, value.max_list_size, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[8]) {
			vnx::read_value(_buf + _field->offset, value.max_queue_ms, _field->code.data());
		}
	}
	for(const auto* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 0: vnx::read(in, value.proxy_name, type_code, _field->code.data()); break;
			case 1: vnx::read(in, value.topic_expr, type_code, _field->code.data()); break;
			case 9: vnx::read(in, value.receive_tunnel, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::vnx::SpyToolBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(code && code[0] == CODE_OBJECT) {
		vnx::write(out, value.to_object(), nullptr, code);
		return;
	}
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = vnx::vnx_native_type_code_SpyToolBase;
		out.write_type_code(type_code);
		vnx::write_class_header<::vnx::SpyToolBase>(out);
	}
	else if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	auto* const _buf = out.write(13);
	vnx::write_value(_buf + 0, value.exact_match);
	vnx::write_value(_buf + 1, value.only_once);
	vnx::write_value(_buf + 2, value.header_only);
	vnx::write_value(_buf + 3, value.pretty_print);
	vnx::write_value(_buf + 4, value.show_resend);
	vnx::write_value(_buf + 5, value.max_list_size);
	vnx::write_value(_buf + 9, value.max_queue_ms);
	vnx::write(out, value.proxy_name, type_code, type_code->fields[0].code.data());
	vnx::write(out, value.topic_expr, type_code, type_code->fields[1].code.data());
	vnx::write(out, value.receive_tunnel, type_code, type_code->fields[9].code.data());
}

void read(std::istream& in, ::vnx::SpyToolBase& value) {
	value.read(in);
}

void write(std::ostream& out, const ::vnx::SpyToolBase& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::vnx::SpyToolBase& value) {
	value.accept(visitor);
}

} // vnx
