
// AUTO GENERATED by vnxcppcodegen

#include <vnx/package.hxx>
#include <vnx/PlayerStatus.hxx>
#include <vnx/RecordHeader.hxx>
#include <vnx/TimeControl.hxx>
#include <vnx/Value.h>

#include <vnx/vnx.h>


namespace vnx {


const vnx::Hash64 PlayerStatus::VNX_TYPE_HASH(0x7356e9a5699a79ebull);
const vnx::Hash64 PlayerStatus::VNX_CODE_HASH(0x6a8821a7c5c39d1aull);

vnx::Hash64 PlayerStatus::get_type_hash() const {
	return VNX_TYPE_HASH;
}

std::string PlayerStatus::get_type_name() const {
	return "vnx.PlayerStatus";
}

const vnx::TypeCode* PlayerStatus::get_type_code() const {
	return vnx::vnx_native_type_code_PlayerStatus;
}

std::shared_ptr<PlayerStatus> PlayerStatus::create() {
	return std::make_shared<PlayerStatus>();
}

std::shared_ptr<vnx::Value> PlayerStatus::clone() const {
	return std::make_shared<PlayerStatus>(*this);
}

void PlayerStatus::read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) {
	vnx::read(_in, *this, _type_code, _code);
}

void PlayerStatus::write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const {
	vnx::write(_out, *this, _type_code, _code);
}

void PlayerStatus::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = vnx::vnx_native_type_code_PlayerStatus;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, filename);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, begin_time);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, end_time);
	_visitor.type_field(_type_code->fields[3], 3); vnx::accept(_visitor, current_time);
	_visitor.type_field(_type_code->fields[4], 4); vnx::accept(_visitor, progress);
	_visitor.type_field(_type_code->fields[5], 5); vnx::accept(_visitor, actual_speed);
	_visitor.type_field(_type_code->fields[6], 6); vnx::accept(_visitor, bandwidth);
	_visitor.type_field(_type_code->fields[7], 7); vnx::accept(_visitor, sample_rate);
	_visitor.type_field(_type_code->fields[8], 8); vnx::accept(_visitor, message);
	_visitor.type_field(_type_code->fields[9], 9); vnx::accept(_visitor, control);
	_visitor.type_field(_type_code->fields[10], 10); vnx::accept(_visitor, info);
	_visitor.type_end(*_type_code);
}

void PlayerStatus::write(std::ostream& _out) const {
	_out << "{\"__type\": \"vnx.PlayerStatus\"";
	_out << ", \"filename\": "; vnx::write(_out, filename);
	_out << ", \"begin_time\": "; vnx::write(_out, begin_time);
	_out << ", \"end_time\": "; vnx::write(_out, end_time);
	_out << ", \"current_time\": "; vnx::write(_out, current_time);
	_out << ", \"progress\": "; vnx::write(_out, progress);
	_out << ", \"actual_speed\": "; vnx::write(_out, actual_speed);
	_out << ", \"bandwidth\": "; vnx::write(_out, bandwidth);
	_out << ", \"sample_rate\": "; vnx::write(_out, sample_rate);
	_out << ", \"message\": "; vnx::write(_out, message);
	_out << ", \"control\": "; vnx::write(_out, control);
	_out << ", \"info\": "; vnx::write(_out, info);
	_out << "}";
}

void PlayerStatus::read(std::istream& _in) {
	if(auto _json = vnx::read_json(_in)) {
		from_object(_json->to_object());
	}
}

vnx::Object PlayerStatus::to_object() const {
	vnx::Object _object;
	_object["__type"] = "vnx.PlayerStatus";
	_object["filename"] = filename;
	_object["begin_time"] = begin_time;
	_object["end_time"] = end_time;
	_object["current_time"] = current_time;
	_object["progress"] = progress;
	_object["actual_speed"] = actual_speed;
	_object["bandwidth"] = bandwidth;
	_object["sample_rate"] = sample_rate;
	_object["message"] = message;
	_object["control"] = control;
	_object["info"] = info;
	return _object;
}

void PlayerStatus::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "actual_speed") {
			_entry.second.to(actual_speed);
		} else if(_entry.first == "bandwidth") {
			_entry.second.to(bandwidth);
		} else if(_entry.first == "begin_time") {
			_entry.second.to(begin_time);
		} else if(_entry.first == "control") {
			_entry.second.to(control);
		} else if(_entry.first == "current_time") {
			_entry.second.to(current_time);
		} else if(_entry.first == "end_time") {
			_entry.second.to(end_time);
		} else if(_entry.first == "filename") {
			_entry.second.to(filename);
		} else if(_entry.first == "info") {
			_entry.second.to(info);
		} else if(_entry.first == "message") {
			_entry.second.to(message);
		} else if(_entry.first == "progress") {
			_entry.second.to(progress);
		} else if(_entry.first == "sample_rate") {
			_entry.second.to(sample_rate);
		}
	}
}

vnx::Variant PlayerStatus::get_field(const std::string& _name) const {
	if(_name == "filename") {
		return vnx::Variant(filename);
	}
	if(_name == "begin_time") {
		return vnx::Variant(begin_time);
	}
	if(_name == "end_time") {
		return vnx::Variant(end_time);
	}
	if(_name == "current_time") {
		return vnx::Variant(current_time);
	}
	if(_name == "progress") {
		return vnx::Variant(progress);
	}
	if(_name == "actual_speed") {
		return vnx::Variant(actual_speed);
	}
	if(_name == "bandwidth") {
		return vnx::Variant(bandwidth);
	}
	if(_name == "sample_rate") {
		return vnx::Variant(sample_rate);
	}
	if(_name == "message") {
		return vnx::Variant(message);
	}
	if(_name == "control") {
		return vnx::Variant(control);
	}
	if(_name == "info") {
		return vnx::Variant(info);
	}
	return vnx::Variant();
}

void PlayerStatus::set_field(const std::string& _name, const vnx::Variant& _value) {
	if(_name == "filename") {
		_value.to(filename);
	} else if(_name == "begin_time") {
		_value.to(begin_time);
	} else if(_name == "end_time") {
		_value.to(end_time);
	} else if(_name == "current_time") {
		_value.to(current_time);
	} else if(_name == "progress") {
		_value.to(progress);
	} else if(_name == "actual_speed") {
		_value.to(actual_speed);
	} else if(_name == "bandwidth") {
		_value.to(bandwidth);
	} else if(_name == "sample_rate") {
		_value.to(sample_rate);
	} else if(_name == "message") {
		_value.to(message);
	} else if(_name == "control") {
		_value.to(control);
	} else if(_name == "info") {
		_value.to(info);
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const PlayerStatus& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, PlayerStatus& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* PlayerStatus::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> PlayerStatus::static_create_type_code() {
	auto type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "vnx.PlayerStatus";
	type_code->type_hash = vnx::Hash64(0x7356e9a5699a79ebull);
	type_code->code_hash = vnx::Hash64(0x6a8821a7c5c39d1aull);
	type_code->is_native = true;
	type_code->is_class = true;
	type_code->native_size = sizeof(::vnx::PlayerStatus);
	type_code->create_value = []() -> std::shared_ptr<vnx::Value> { return std::make_shared<PlayerStatus>(); };
	type_code->depends.resize(2);
	type_code->depends[0] = ::vnx::TimeControl::static_get_type_code();
	type_code->depends[1] = ::vnx::RecordHeader::static_get_type_code();
	type_code->fields.resize(11);
	{
		auto& field = type_code->fields[0];
		field.is_extended = true;
		field.name = "filename";
		field.code = {32};
	}
	{
		auto& field = type_code->fields[1];
		field.data_size = 8;
		field.name = "begin_time";
		field.code = {8};
	}
	{
		auto& field = type_code->fields[2];
		field.data_size = 8;
		field.name = "end_time";
		field.code = {8};
	}
	{
		auto& field = type_code->fields[3];
		field.data_size = 8;
		field.name = "current_time";
		field.code = {8};
	}
	{
		auto& field = type_code->fields[4];
		field.data_size = 8;
		field.name = "progress";
		field.code = {10};
	}
	{
		auto& field = type_code->fields[5];
		field.data_size = 8;
		field.name = "actual_speed";
		field.code = {10};
	}
	{
		auto& field = type_code->fields[6];
		field.data_size = 8;
		field.name = "bandwidth";
		field.code = {10};
	}
	{
		auto& field = type_code->fields[7];
		field.data_size = 8;
		field.name = "sample_rate";
		field.code = {10};
	}
	{
		auto& field = type_code->fields[8];
		field.is_extended = true;
		field.name = "message";
		field.code = {32};
	}
	{
		auto& field = type_code->fields[9];
		field.is_extended = true;
		field.name = "control";
		field.code = {19, 0};
	}
	{
		auto& field = type_code->fields[10];
		field.is_extended = true;
		field.name = "info";
		field.code = {19, 1};
	}
	type_code->build();
	return type_code;
}

std::shared_ptr<vnx::Value> PlayerStatus::vnx_call_switch(std::shared_ptr<const vnx::Value> _method) {
	switch(_method->get_type_hash()) {
	}
	return nullptr;
}


} // namespace vnx


namespace vnx {

void read(TypeInput& in, ::vnx::PlayerStatus& value, const TypeCode* type_code, const uint16_t* code) {
	TypeInput::recursion_t tag(in);
	if(code) {
		switch(code[0]) {
			case CODE_OBJECT:
			case CODE_ALT_OBJECT: {
				Object tmp;
				vnx::read(in, tmp, type_code, code);
				value.from_object(tmp);
				return;
			}
			case CODE_DYNAMIC:
			case CODE_ALT_DYNAMIC:
				vnx::read_dynamic(in, value);
				return;
		}
	}
	if(!type_code) {
		vnx::skip(in, type_code, code);
		return;
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: {
				vnx::skip(in, type_code, code);
				return;
			}
		}
	}
	const auto* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
		if(const auto* const _field = type_code->field_map[1]) {
			vnx::read_value(_buf + _field->offset, value.begin_time, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[2]) {
			vnx::read_value(_buf + _field->offset, value.end_time, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[3]) {
			vnx::read_value(_buf + _field->offset, value.current_time, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[4]) {
			vnx::read_value(_buf + _field->offset, value.progress, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[5]) {
			vnx::read_value(_buf + _field->offset, value.actual_speed, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[6]) {
			vnx::read_value(_buf + _field->offset, value.bandwidth, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[7]) {
			vnx::read_value(_buf + _field->offset, value.sample_rate, _field->code.data());
		}
	}
	for(const auto* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 0: vnx::read(in, value.filename, type_code, _field->code.data()); break;
			case 8: vnx::read(in, value.message, type_code, _field->code.data()); break;
			case 9: vnx::read(in, value.control, type_code, _field->code.data()); break;
			case 10: vnx::read(in, value.info, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::vnx::PlayerStatus& value, const TypeCode* type_code, const uint16_t* code) {
	if(code && code[0] == CODE_OBJECT) {
		vnx::write(out, value.to_object(), nullptr, code);
		return;
	}
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = vnx::vnx_native_type_code_PlayerStatus;
		out.write_type_code(type_code);
		vnx::write_class_header<::vnx::PlayerStatus>(out);
	}
	else if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	auto* const _buf = out.write(56);
	vnx::write_value(_buf + 0, value.begin_time);
	vnx::write_value(_buf + 8, value.end_time);
	vnx::write_value(_buf + 16, value.current_time);
	vnx::write_value(_buf + 24, value.progress);
	vnx::write_value(_buf + 32, value.actual_speed);
	vnx::write_value(_buf + 40, value.bandwidth);
	vnx::write_value(_buf + 48, value.sample_rate);
	vnx::write(out, value.filename, type_code, type_code->fields[0].code.data());
	vnx::write(out, value.message, type_code, type_code->fields[8].code.data());
	vnx::write(out, value.control, type_code, type_code->fields[9].code.data());
	vnx::write(out, value.info, type_code, type_code->fields[10].code.data());
}

void read(std::istream& in, ::vnx::PlayerStatus& value) {
	value.read(in);
}

void write(std::ostream& out, const ::vnx::PlayerStatus& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::vnx::PlayerStatus& value) {
	value.accept(visitor);
}

} // vnx
