
// AUTO GENERATED by vnxcppcodegen

#include <vnx/package.hxx>
#include <vnx/ProcessBase.hxx>
#include <vnx/NoSuchMethod.hxx>
#include <vnx/LogMsg.hxx>
#include <vnx/Module.h>
#include <vnx/ModuleInfo.hxx>
#include <vnx/ModuleInterface_vnx_get_config.hxx>
#include <vnx/ModuleInterface_vnx_get_config_return.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info_return.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code_return.hxx>
#include <vnx/ModuleInterface_vnx_restart.hxx>
#include <vnx/ModuleInterface_vnx_restart_return.hxx>
#include <vnx/ModuleInterface_vnx_self_test.hxx>
#include <vnx/ModuleInterface_vnx_self_test_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config.hxx>
#include <vnx/ModuleInterface_vnx_set_config_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_stop.hxx>
#include <vnx/ModuleInterface_vnx_stop_return.hxx>
#include <vnx/Process_get_global_config.hxx>
#include <vnx/Process_get_global_config_return.hxx>
#include <vnx/Process_get_module_info.hxx>
#include <vnx/Process_get_module_info_return.hxx>
#include <vnx/Process_get_name.hxx>
#include <vnx/Process_get_name_return.hxx>
#include <vnx/Process_get_process_info.hxx>
#include <vnx/Process_get_process_info_return.hxx>
#include <vnx/Process_get_sync_time.hxx>
#include <vnx/Process_get_sync_time_return.hxx>
#include <vnx/Process_get_topic_info.hxx>
#include <vnx/Process_get_topic_info_return.hxx>
#include <vnx/Process_grep_log.hxx>
#include <vnx/Process_grep_log_return.hxx>
#include <vnx/Process_journal_log.hxx>
#include <vnx/Process_journal_log_return.hxx>
#include <vnx/Process_pause_log.hxx>
#include <vnx/Process_pause_log_return.hxx>
#include <vnx/Process_reload_config.hxx>
#include <vnx/Process_reload_config_return.hxx>
#include <vnx/Process_resume_log.hxx>
#include <vnx/Process_resume_log_return.hxx>
#include <vnx/Process_self_test_all.hxx>
#include <vnx/Process_self_test_all_return.hxx>
#include <vnx/Process_set_debug.hxx>
#include <vnx/Process_set_debug_return.hxx>
#include <vnx/Process_set_global_config.hxx>
#include <vnx/Process_set_global_config_return.hxx>
#include <vnx/Process_show_error_log.hxx>
#include <vnx/Process_show_error_log_return.hxx>
#include <vnx/Process_trigger_shutdown.hxx>
#include <vnx/Process_trigger_shutdown_return.hxx>
#include <vnx/Process_ungrep_log.hxx>
#include <vnx/Process_ungrep_log_return.hxx>
#include <vnx/ProcessInfo.hxx>
#include <vnx/TimeControl.hxx>
#include <vnx/TimeSync.hxx>
#include <vnx/TopicInfo.hxx>
#include <vnx/Variant.hpp>

#include <vnx/vnx.h>


namespace vnx {


const vnx::Hash64 ProcessBase::VNX_TYPE_HASH(0x149355fa43209cb1ull);
const vnx::Hash64 ProcessBase::VNX_CODE_HASH(0x18284d06b43bbaf5ull);

ProcessBase::ProcessBase(const std::string& _vnx_name)
	:	Module::Module(_vnx_name)
{
	vnx::read_config(vnx_name + ".log_file_level", log_file_level);
	vnx::read_config(vnx_name + ".update_interval_ms", update_interval_ms);
	vnx::read_config(vnx_name + ".log_history_size", log_history_size);
	vnx::read_config(vnx_name + ".error_history_size", error_history_size);
	vnx::read_config(vnx_name + ".log_file_name", log_file_name);
	vnx::read_config(vnx_name + ".log_file_path", log_file_path);
	vnx::read_config(vnx_name + ".log_file_name_suffix", log_file_name_suffix);
	vnx::read_config(vnx_name + ".log_file_entry_prefix", log_file_entry_prefix);
	vnx::read_config(vnx_name + ".log_file_auto_restart", log_file_auto_restart);
}

vnx::Hash64 ProcessBase::get_type_hash() const {
	return VNX_TYPE_HASH;
}

std::string ProcessBase::get_type_name() const {
	return "vnx.Process";
}

const vnx::TypeCode* ProcessBase::get_type_code() const {
	return vnx::vnx_native_type_code_ProcessBase;
}

void ProcessBase::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = vnx::vnx_native_type_code_ProcessBase;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, log_file_level);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, update_interval_ms);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, log_history_size);
	_visitor.type_field(_type_code->fields[3], 3); vnx::accept(_visitor, error_history_size);
	_visitor.type_field(_type_code->fields[4], 4); vnx::accept(_visitor, log_file_name);
	_visitor.type_field(_type_code->fields[5], 5); vnx::accept(_visitor, log_file_path);
	_visitor.type_field(_type_code->fields[6], 6); vnx::accept(_visitor, log_file_name_suffix);
	_visitor.type_field(_type_code->fields[7], 7); vnx::accept(_visitor, log_file_entry_prefix);
	_visitor.type_field(_type_code->fields[8], 8); vnx::accept(_visitor, log_file_auto_restart);
	_visitor.type_end(*_type_code);
}

void ProcessBase::write(std::ostream& _out) const {
	_out << "{";
	_out << "\"log_file_level\": "; vnx::write(_out, log_file_level);
	_out << ", \"update_interval_ms\": "; vnx::write(_out, update_interval_ms);
	_out << ", \"log_history_size\": "; vnx::write(_out, log_history_size);
	_out << ", \"error_history_size\": "; vnx::write(_out, error_history_size);
	_out << ", \"log_file_name\": "; vnx::write(_out, log_file_name);
	_out << ", \"log_file_path\": "; vnx::write(_out, log_file_path);
	_out << ", \"log_file_name_suffix\": "; vnx::write(_out, log_file_name_suffix);
	_out << ", \"log_file_entry_prefix\": "; vnx::write(_out, log_file_entry_prefix);
	_out << ", \"log_file_auto_restart\": "; vnx::write(_out, log_file_auto_restart);
	_out << "}";
}

void ProcessBase::read(std::istream& _in) {
	if(auto _json = vnx::read_json(_in)) {
		from_object(_json->to_object());
	}
}

vnx::Object ProcessBase::to_object() const {
	vnx::Object _object;
	_object["__type"] = "vnx.Process";
	_object["log_file_level"] = log_file_level;
	_object["update_interval_ms"] = update_interval_ms;
	_object["log_history_size"] = log_history_size;
	_object["error_history_size"] = error_history_size;
	_object["log_file_name"] = log_file_name;
	_object["log_file_path"] = log_file_path;
	_object["log_file_name_suffix"] = log_file_name_suffix;
	_object["log_file_entry_prefix"] = log_file_entry_prefix;
	_object["log_file_auto_restart"] = log_file_auto_restart;
	return _object;
}

void ProcessBase::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "error_history_size") {
			_entry.second.to(error_history_size);
		} else if(_entry.first == "log_file_auto_restart") {
			_entry.second.to(log_file_auto_restart);
		} else if(_entry.first == "log_file_entry_prefix") {
			_entry.second.to(log_file_entry_prefix);
		} else if(_entry.first == "log_file_level") {
			_entry.second.to(log_file_level);
		} else if(_entry.first == "log_file_name") {
			_entry.second.to(log_file_name);
		} else if(_entry.first == "log_file_name_suffix") {
			_entry.second.to(log_file_name_suffix);
		} else if(_entry.first == "log_file_path") {
			_entry.second.to(log_file_path);
		} else if(_entry.first == "log_history_size") {
			_entry.second.to(log_history_size);
		} else if(_entry.first == "update_interval_ms") {
			_entry.second.to(update_interval_ms);
		}
	}
}

vnx::Variant ProcessBase::get_field(const std::string& _name) const {
	if(_name == "log_file_level") {
		return vnx::Variant(log_file_level);
	}
	if(_name == "update_interval_ms") {
		return vnx::Variant(update_interval_ms);
	}
	if(_name == "log_history_size") {
		return vnx::Variant(log_history_size);
	}
	if(_name == "error_history_size") {
		return vnx::Variant(error_history_size);
	}
	if(_name == "log_file_name") {
		return vnx::Variant(log_file_name);
	}
	if(_name == "log_file_path") {
		return vnx::Variant(log_file_path);
	}
	if(_name == "log_file_name_suffix") {
		return vnx::Variant(log_file_name_suffix);
	}
	if(_name == "log_file_entry_prefix") {
		return vnx::Variant(log_file_entry_prefix);
	}
	if(_name == "log_file_auto_restart") {
		return vnx::Variant(log_file_auto_restart);
	}
	return vnx::Variant();
}

void ProcessBase::set_field(const std::string& _name, const vnx::Variant& _value) {
	if(_name == "log_file_level") {
		_value.to(log_file_level);
	} else if(_name == "update_interval_ms") {
		_value.to(update_interval_ms);
	} else if(_name == "log_history_size") {
		_value.to(log_history_size);
	} else if(_name == "error_history_size") {
		_value.to(error_history_size);
	} else if(_name == "log_file_name") {
		_value.to(log_file_name);
	} else if(_name == "log_file_path") {
		_value.to(log_file_path);
	} else if(_name == "log_file_name_suffix") {
		_value.to(log_file_name_suffix);
	} else if(_name == "log_file_entry_prefix") {
		_value.to(log_file_entry_prefix);
	} else if(_name == "log_file_auto_restart") {
		_value.to(log_file_auto_restart);
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const ProcessBase& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, ProcessBase& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* ProcessBase::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> ProcessBase::static_create_type_code() {
	auto type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "vnx.Process";
	type_code->type_hash = vnx::Hash64(0x149355fa43209cb1ull);
	type_code->code_hash = vnx::Hash64(0x18284d06b43bbaf5ull);
	type_code->is_native = true;
	type_code->native_size = sizeof(::vnx::ProcessBase);
	type_code->methods.resize(26);
	type_code->methods[0] = ::vnx::ModuleInterface_vnx_get_config::static_get_type_code();
	type_code->methods[1] = ::vnx::ModuleInterface_vnx_get_config_object::static_get_type_code();
	type_code->methods[2] = ::vnx::ModuleInterface_vnx_get_module_info::static_get_type_code();
	type_code->methods[3] = ::vnx::ModuleInterface_vnx_get_type_code::static_get_type_code();
	type_code->methods[4] = ::vnx::ModuleInterface_vnx_restart::static_get_type_code();
	type_code->methods[5] = ::vnx::ModuleInterface_vnx_self_test::static_get_type_code();
	type_code->methods[6] = ::vnx::ModuleInterface_vnx_set_config::static_get_type_code();
	type_code->methods[7] = ::vnx::ModuleInterface_vnx_set_config_object::static_get_type_code();
	type_code->methods[8] = ::vnx::ModuleInterface_vnx_stop::static_get_type_code();
	type_code->methods[9] = ::vnx::Process_get_global_config::static_get_type_code();
	type_code->methods[10] = ::vnx::Process_get_module_info::static_get_type_code();
	type_code->methods[11] = ::vnx::Process_get_name::static_get_type_code();
	type_code->methods[12] = ::vnx::Process_get_process_info::static_get_type_code();
	type_code->methods[13] = ::vnx::Process_get_sync_time::static_get_type_code();
	type_code->methods[14] = ::vnx::Process_get_topic_info::static_get_type_code();
	type_code->methods[15] = ::vnx::Process_grep_log::static_get_type_code();
	type_code->methods[16] = ::vnx::Process_journal_log::static_get_type_code();
	type_code->methods[17] = ::vnx::Process_pause_log::static_get_type_code();
	type_code->methods[18] = ::vnx::Process_reload_config::static_get_type_code();
	type_code->methods[19] = ::vnx::Process_resume_log::static_get_type_code();
	type_code->methods[20] = ::vnx::Process_self_test_all::static_get_type_code();
	type_code->methods[21] = ::vnx::Process_set_debug::static_get_type_code();
	type_code->methods[22] = ::vnx::Process_set_global_config::static_get_type_code();
	type_code->methods[23] = ::vnx::Process_show_error_log::static_get_type_code();
	type_code->methods[24] = ::vnx::Process_trigger_shutdown::static_get_type_code();
	type_code->methods[25] = ::vnx::Process_ungrep_log::static_get_type_code();
	type_code->fields.resize(9);
	{
		auto& field = type_code->fields[0];
		field.data_size = 4;
		field.name = "log_file_level";
		field.value = vnx::to_string(2);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[1];
		field.data_size = 4;
		field.name = "update_interval_ms";
		field.value = vnx::to_string(500);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[2];
		field.data_size = 4;
		field.name = "log_history_size";
		field.value = vnx::to_string(10000);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[3];
		field.data_size = 4;
		field.name = "error_history_size";
		field.value = vnx::to_string(100);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[4];
		field.is_extended = true;
		field.name = "log_file_name";
		field.code = {32};
	}
	{
		auto& field = type_code->fields[5];
		field.is_extended = true;
		field.name = "log_file_path";
		field.code = {32};
	}
	{
		auto& field = type_code->fields[6];
		field.is_extended = true;
		field.name = "log_file_name_suffix";
		field.value = vnx::to_string("_%Y_%m_%d.txt");
		field.code = {32};
	}
	{
		auto& field = type_code->fields[7];
		field.is_extended = true;
		field.name = "log_file_entry_prefix";
		field.value = vnx::to_string("%Y-%m-%d %H:%M:%S ");
		field.code = {32};
	}
	{
		auto& field = type_code->fields[8];
		field.data_size = 1;
		field.name = "log_file_auto_restart";
		field.value = vnx::to_string(true);
		field.code = {31};
	}
	type_code->build();
	return type_code;
}

void ProcessBase::vnx_handle_switch(std::shared_ptr<const vnx::Value> _value) {
	const auto* _type_code = _value->get_type_code();
	while(_type_code) {
		switch(_type_code->type_hash) {
			case 0x2a13f6d072f9b852ull:
				handle(std::static_pointer_cast<const ::vnx::LogMsg>(_value));
				return;
			case 0xde56f839ffcee92ull:
				handle(std::static_pointer_cast<const ::vnx::ModuleInfo>(_value));
				return;
			case 0x7a87353e7678e927ull:
				handle(std::static_pointer_cast<const ::vnx::TimeControl>(_value));
				return;
			case 0xbf54227bf7e745b4ull:
				handle(std::static_pointer_cast<const ::vnx::TimeSync>(_value));
				return;
			default:
				_type_code = _type_code->super;
		}
	}
	handle(std::static_pointer_cast<const vnx::Value>(_value));
}

std::shared_ptr<vnx::Value> ProcessBase::vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) {
	switch(_method->get_type_hash()) {
		case 0xbbc7f1a01044d294ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_config_return::create();
			_return_value->_ret_0 = vnx_get_config(_args->name);
			return _return_value;
		}
		case 0x17f58f68bf83abc0ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_object>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_config_object_return::create();
			_return_value->_ret_0 = vnx_get_config_object();
			return _return_value;
		}
		case 0xf6d82bdf66d034a1ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_module_info>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_module_info_return::create();
			_return_value->_ret_0 = vnx_get_module_info();
			return _return_value;
		}
		case 0x305ec4d628960e5dull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_type_code>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_type_code_return::create();
			_return_value->_ret_0 = vnx_get_type_code();
			return _return_value;
		}
		case 0x9e95dc280cecca1bull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_restart>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_restart_return::create();
			vnx_restart();
			return _return_value;
		}
		case 0x6ce3775b41a42697ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_self_test>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_self_test_return::create();
			_return_value->_ret_0 = vnx_self_test();
			return _return_value;
		}
		case 0x362aac91373958b7ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_set_config>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_set_config_return::create();
			vnx_set_config(_args->name, _args->value);
			return _return_value;
		}
		case 0xca30f814f17f322full: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_set_config_object>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_set_config_object_return::create();
			vnx_set_config_object(_args->config);
			return _return_value;
		}
		case 0x7ab49ce3d1bfc0d2ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_stop>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_stop_return::create();
			vnx_stop();
			return _return_value;
		}
		case 0x45f9dbed550b37d9ull: {
			auto _args = std::static_pointer_cast<const ::vnx::Process_get_global_config>(_method);
			auto _return_value = ::vnx::Process_get_global_config_return::create();
			_return_value->_ret_0 = get_global_config(_args->key);
			return _return_value;
		}
		case 0x61e2fd6d8b7d628ull: {
			auto _args = std::static_pointer_cast<const ::vnx::Process_get_module_info>(_method);
			auto _return_value = ::vnx::Process_get_module_info_return::create();
			_return_value->_ret_0 = get_module_info();
			return _return_value;
		}
		case 0xcc81c6fa292b2300ull: {
			auto _args = std::static_pointer_cast<const ::vnx::Process_get_name>(_method);
			auto _return_value = ::vnx::Process_get_name_return::create();
			_return_value->_ret_0 = get_name();
			return _return_value;
		}
		case 0x4df5fe4349df342eull: {
			auto _args = std::static_pointer_cast<const ::vnx::Process_get_process_info>(_method);
			auto _return_value = ::vnx::Process_get_process_info_return::create();
			_return_value->_ret_0 = get_process_info();
			return _return_value;
		}
		case 0x52100ddd83201e5cull: {
			auto _args = std::static_pointer_cast<const ::vnx::Process_get_sync_time>(_method);
			auto _return_value = ::vnx::Process_get_sync_time_return::create();
			_return_value->_ret_0 = get_sync_time();
			return _return_value;
		}
		case 0xa4d23f22700c78c4ull: {
			auto _args = std::static_pointer_cast<const ::vnx::Process_get_topic_info>(_method);
			auto _return_value = ::vnx::Process_get_topic_info_return::create();
			_return_value->_ret_0 = get_topic_info(_args->include_domains);
			return _return_value;
		}
		case 0x2cbc4a5cebf11808ull: {
			auto _args = std::static_pointer_cast<const ::vnx::Process_grep_log>(_method);
			auto _return_value = ::vnx::Process_grep_log_return::create();
			grep_log(_args->expr);
			return _return_value;
		}
		case 0x9eb901b7a36ac0c1ull: {
			auto _args = std::static_pointer_cast<const ::vnx::Process_journal_log>(_method);
			auto _return_value = ::vnx::Process_journal_log_return::create();
			journal_log(_args->expr);
			return _return_value;
		}
		case 0xab840945a4069720ull: {
			auto _args = std::static_pointer_cast<const ::vnx::Process_pause_log>(_method);
			auto _return_value = ::vnx::Process_pause_log_return::create();
			pause_log();
			return _return_value;
		}
		case 0x434937c5c6f96de7ull: {
			auto _args = std::static_pointer_cast<const ::vnx::Process_reload_config>(_method);
			auto _return_value = ::vnx::Process_reload_config_return::create();
			reload_config();
			return _return_value;
		}
		case 0x47a431cdd5ea3171ull: {
			auto _args = std::static_pointer_cast<const ::vnx::Process_resume_log>(_method);
			auto _return_value = ::vnx::Process_resume_log_return::create();
			resume_log();
			return _return_value;
		}
		case 0x757d61aa2ac74f7bull: {
			auto _args = std::static_pointer_cast<const ::vnx::Process_self_test_all>(_method);
			self_test_all_async(_request_id);
			return nullptr;
		}
		case 0xdc4916fdbd8d5616ull: {
			auto _args = std::static_pointer_cast<const ::vnx::Process_set_debug>(_method);
			auto _return_value = ::vnx::Process_set_debug_return::create();
			set_debug(_args->level);
			return _return_value;
		}
		case 0x983cac911bf7ae36ull: {
			auto _args = std::static_pointer_cast<const ::vnx::Process_set_global_config>(_method);
			auto _return_value = ::vnx::Process_set_global_config_return::create();
			set_global_config(_args->key, _args->value);
			return _return_value;
		}
		case 0xd569d9ff26cc2b95ull: {
			auto _args = std::static_pointer_cast<const ::vnx::Process_show_error_log>(_method);
			auto _return_value = ::vnx::Process_show_error_log_return::create();
			show_error_log();
			return _return_value;
		}
		case 0x2b724b09091c4b96ull: {
			auto _args = std::static_pointer_cast<const ::vnx::Process_trigger_shutdown>(_method);
			auto _return_value = ::vnx::Process_trigger_shutdown_return::create();
			trigger_shutdown();
			return _return_value;
		}
		case 0xf34b9052419eb6caull: {
			auto _args = std::static_pointer_cast<const ::vnx::Process_ungrep_log>(_method);
			auto _return_value = ::vnx::Process_ungrep_log_return::create();
			ungrep_log();
			return _return_value;
		}
	}
	auto _ex = vnx::NoSuchMethod::create();
	_ex->method = _method->get_type_name();
	return _ex;
}

void ProcessBase::self_test_all_async_return(const vnx::request_id_t& _request_id) const {
	auto _return_value = ::vnx::Process_self_test_all_return::create();
	vnx_async_return(_request_id, _return_value);
}


} // namespace vnx


namespace vnx {

void read(TypeInput& in, ::vnx::ProcessBase& value, const TypeCode* type_code, const uint16_t* code) {
	TypeInput::recursion_t tag(in);
	if(code) {
		switch(code[0]) {
			case CODE_OBJECT:
			case CODE_ALT_OBJECT: {
				Object tmp;
				vnx::read(in, tmp, type_code, code);
				value.from_object(tmp);
				return;
			}
			case CODE_DYNAMIC:
			case CODE_ALT_DYNAMIC:
				vnx::read_dynamic(in, value);
				return;
		}
	}
	if(!type_code) {
		vnx::skip(in, type_code, code);
		return;
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: {
				vnx::skip(in, type_code, code);
				return;
			}
		}
	}
	const auto* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
		if(const auto* const _field = type_code->field_map[0]) {
			vnx::read_value(_buf + _field->offset, value.log_file_level, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[1]) {
			vnx::read_value(_buf + _field->offset, value.update_interval_ms, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[2]) {
			vnx::read_value(_buf + _field->offset, value.log_history_size, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[3]) {
			vnx::read_value(_buf + _field->offset, value.error_history_size, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[8]) {
			vnx::read_value(_buf + _field->offset, value.log_file_auto_restart, _field->code.data());
		}
	}
	for(const auto* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 4: vnx::read(in, value.log_file_name, type_code, _field->code.data()); break;
			case 5: vnx::read(in, value.log_file_path, type_code, _field->code.data()); break;
			case 6: vnx::read(in, value.log_file_name_suffix, type_code, _field->code.data()); break;
			case 7: vnx::read(in, value.log_file_entry_prefix, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::vnx::ProcessBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(code && code[0] == CODE_OBJECT) {
		vnx::write(out, value.to_object(), nullptr, code);
		return;
	}
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = vnx::vnx_native_type_code_ProcessBase;
		out.write_type_code(type_code);
		vnx::write_class_header<::vnx::ProcessBase>(out);
	}
	else if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	auto* const _buf = out.write(17);
	vnx::write_value(_buf + 0, value.log_file_level);
	vnx::write_value(_buf + 4, value.update_interval_ms);
	vnx::write_value(_buf + 8, value.log_history_size);
	vnx::write_value(_buf + 12, value.error_history_size);
	vnx::write_value(_buf + 16, value.log_file_auto_restart);
	vnx::write(out, value.log_file_name, type_code, type_code->fields[4].code.data());
	vnx::write(out, value.log_file_path, type_code, type_code->fields[5].code.data());
	vnx::write(out, value.log_file_name_suffix, type_code, type_code->fields[6].code.data());
	vnx::write(out, value.log_file_entry_prefix, type_code, type_code->fields[7].code.data());
}

void read(std::istream& in, ::vnx::ProcessBase& value) {
	value.read(in);
}

void write(std::ostream& out, const ::vnx::ProcessBase& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::vnx::ProcessBase& value) {
	value.accept(visitor);
}

} // vnx
